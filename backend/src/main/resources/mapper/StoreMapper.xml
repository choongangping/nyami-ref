<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.StoreMapper">

	<select id="selectStores" resultType="store">
		SELECT * FROM (
		    SELECT s.*, ROWNUM AS rnum FROM (
		        SELECT * FROM store
                <where>
	                <if test="requestData.keyword != null and requestData.keyword != ''">
	                    ${requestData.column} LIKE '%' || #{requestData.keyword} || '%'
	                </if>
            	</where>
            	<where>
            		<if test="requestData.enrollStatus != null and requestData.enrollStatus != ''">
            			enroll_status = #{requestData.enrollStatus}
            		</if>
            	</where>
		        ORDER BY id DESC
		    ) s
		) 
		WHERE rnum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="selectEnrolledStores" resultType="store">
		SELECT * FROM (
		    SELECT m.*, ROWNUM AS rnum FROM (
		        SELECT * FROM store 
                <where>
                	enroll_status = 'enrolled'
	                <if test="requestData.keyword != null and requestData.keyword != ''">
	                    AND ${requestData.column} LIKE '%' || #{requestData.keyword} || '%'
	                </if>
            	</where>
		        ORDER BY id DESC
		    ) m
		) 
		WHERE rnum BETWEEN #{start} AND #{end}
	</select>
	
    <select id="getStoreDetailById" parameterType="long" resultType="store">
    	SELECT * FROM store WHERE id = #{store_ID}
    </select>
    
    <select id="selectStoreWithDetailById" parameterType="long" resultType="storeWithDetailDTO">
	    SELECT
	        s.id AS id,
	        s.store_name AS storeName,
	        s.address AS address,
	        s.detail_address AS detailAddress,
	        s.tel AS tel,
	        s.phone_number AS phoneNumber,
	        s.main_image1 AS mainImage1,
	        s.main_image2 AS mainImage2,
	        s.latitude AS latitude,
	        s.longitude AS longitude,
	        s.views AS views,
	        s.open_time AS openTime,
	        s.store_description AS storeDescription,
	        s.post_status AS postStatus,
	        s.enroll_status AS enrollStatus,
	        s.ceo_name AS ceoName,

	        l.local AS local,
	        i.industry AS industry
	    FROM store s
	    JOIN local l ON s.id = l.store_id
	    JOIN industry i ON s.id = i.store_id
	    WHERE s.id = #{id}
    </select>
    
    <select id="selectMenuImagesById" resultType="String">
    	SELECT menu_image FROM menu
    	WHERE store_id=#{id}
    </select>
    
    <select id="selectThemesById" resultType="String">
    	SELECT theme FROM theme
    	WHERE store_id=#{id}
    </select>

    
	<select id="selectStoreById" parameterType="long" resultType="storeDetailDTO">
	    SELECT
	        s.id AS id,
	        s.store_name AS storeName,
	        s.address AS address,
	        s.detail_address AS detailAddress,
	        s.tel AS tel,
	        s.phone_number AS phoneNumber,
	        s.main_image1 AS mainImage1,
	        s.main_image2 AS mainImage2,
	        s.latitude AS latitude,
	        s.longitude AS longitude,
	        s.views AS views,
	        s.open_time AS openTime,
	        s.store_description AS storeDescription,
	        s.post_status AS postStatus,
	        s.enroll_status AS enrollStatus,
	        s.ceo_name AS ceoName
	    FROM store s
	    WHERE s.id = #{id}
	</select>

	<select id="selectMenuById" parameterType="long" resultType="menu">
	    SELECT
	        m.menu_image AS menuImage,
	        m.menu_description AS menuDescription,
	        m.menu_name AS menuName,
	        m.menu_price AS menuPrice
	    FROM menu m
	    WHERE m.store_id = #{id}
	</select>
    
	<select id="countStores" resultType="long">
		SELECT COUNT(*) FROM store
        <where>
	        <if test="keyword != null and keyword != ''">
	            ${column} LIKE '%' || #{keyword} || '%'
	        </if>
	        <if test="enrollStatus != null and enrollStatus != ''">
	        	enroll_status = #{enrollStatus}	
	        </if>
    	</where>
	</select>
	
	<select id="countEnrolledStores" resultType="long">
		SELECT COUNT(*) FROM store
        <where>
        	enroll_status = 'enrolled'
	        <if test="keyword != null and keyword != ''">
	            AND ${column} LIKE '%' || #{keyword} || '%'
	        </if>
    	</where>
	</select>
	
	<update id="inactivateStore" parameterType="long">
		UPDATE store SET post_status='inactive'
		WHERE id=#{id}
	</update>
	
	<update id="reactivateStore" parameterType="long">
		UPDATE store SET post_status='active'
		WHERE id=#{id}
	</update>
	
	<!-- 게시글 검토 -->
	<update id="updateReadStatus" parameterType="long">
		UPDATE store SET enroll_status='read'
		WHERE id=#{id}	
	</update>
	
	<!-- 게시글 승인 -->
	<update id="enrollStore" parameterType="long">
		UPDATE store SET enroll_status='enrolled'
		WHERE id=#{id}
	</update>
	
	<!-- 게시글 반려 -->
	<update id="withdrawStore" parameterType="long">
		UPDATE store SET enroll_status='withdrawal'
		WHERE id=#{id}
	</update>
	
	<select id="getMenuById" parameterType="long" resultType="menu">
		SELECT * FROM menu WHERE store_id = #{storeID}
	</select>
	
	<!-- 홈페이지 가게 게시판 -->
	<select id="getActiveStores" resultType="store">
		SELECT * FROM store
		WHERE post_status='active' AND enroll_status='enrolled'
	</select>
	
	<!-- 홈페이지 가게 게시판 (카테고리 지역)-->
	<select id="findStoresByLocation" parameterType="String" resultType="store">
	    SELECT store.*
	    FROM store
	    JOIN local ON store.id = local.store_id
	    WHERE local.local = #{location}
	</select>
	
	<!-- 찜 추가 -->
    <insert id="save" parameterType="memberLike">
        INSERT INTO member_like (member_id, store_id, created_at)
        VALUES (#{memberId}, #{storeId}, #{createdAt})
    </insert>
	
	<!-- 찜 취소 -->
    <delete id="deleteByMemberIdAndStoreId">
        DELETE FROM member_like
        WHERE member_id = #{memberId} AND store_id = #{storeId}
    </delete>
    
	<select id="findStoresByFilters" resultType="store">
	    SELECT DISTINCT s.*
        FROM store s
        LEFT JOIN local l ON s.id = l.store_id
        LEFT JOIN industry i ON s.id = i.store_id
        LEFT JOIN theme t ON s.id = t.store_id
        <where>
            <if test="location != null and location != ''">
                AND l.local = #{location}
            </if>
            
            <!-- 업종 카테고리 필터 (업종 카테고리만 선택 했을 경우)-->
            <if test="industry != null and industry != ''">
	            AND i.industry = #{industry}
	        </if>
	        
	        <!-- 세부 카테고리 필터 (업종과 세부 카테고리를 같이 선택 했을 경우)-->
	        <if test="subCategory != null and subCategory != ''">
	            <choose>
	                <when test="industry == '음식점'">
	                    AND s.id IN (SELECT store_id FROM restaurant WHERE restaurant = #{subCategory})
	                </when>
	                <when test="industry == '카페'">
	                    AND s.id IN (SELECT store_id FROM cafe WHERE cafe = #{subCategory})
	                </when>
	                <when test="industry == '술집'">
	                    AND s.id IN (SELECT store_id FROM bar WHERE bar = #{subCategory})
	                </when>
	            </choose>
	        </if>
	
	        <!-- 테마 필터 조건: 테마가 선택된 경우에만 적용 -->
	        <if test="themeArray != null and themeArray.size() > 0">
	            AND t.theme IN
	            <foreach item="theme" collection="themeArray" open="(" separator="," close=")">
	                #{theme}
	            </foreach>
	        </if>
        </where>
    </select>
	
	<!-- 찜 좋아요 수 가져오기 -->
	<select id="getLikeCountByStoreId" parameterType="long" resultType="long">
		SELECT COUNT(*) FROM Member_Like WHERE store_id = #{storeId}
	</select>
	
	<!-- 특정 사용자가 특정 가게를 찜했는지 확인 -->
    <select id="isMemberLikedStore" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM Member_Like
        WHERE store_id = #{storeId}
          AND member_id = #{memberId}
    </select>
    
		<!-- 카테고리 가져오기  -->
    <select id="getStoreCategory" parameterType="long" resultType="storeWithLocationDTO">
	SELECT
		s.id AS storeId,
		s.store_name AS storeName,
		i.industry AS industry
	FROM store s
	LEFT JOIN industry i ON s.id = i.store_id
	WHERE s.id = #{storeId}
    </select>
		
    <!-- 정렬된 가게 목록 조회 -->
    <select id="findStoresByOrder" resultType="Store">
        SELECT DISTINCT s.*, 
               (SELECT COUNT(*) FROM Member_Like ml WHERE ml.store_id = s.id) AS likeCount,
               s.views AS viewCount,
               (SELECT COUNT(*) FROM review r WHERE r.store_id = s.id) AS reviewCount
        FROM store s
        LEFT JOIN local l ON s.id = l.store_id
        LEFT JOIN industry i ON s.id = i.store_id
        LEFT JOIN theme t ON s.id = t.store_id
        <where>
            <if test="location != null and location != ''">
                AND l.local = #{location}
            </if>
    
            <if test="industry != null and industry != ''">
                AND i.industry = #{industry}
            </if>
    
            <if test="subCategory != null and subCategory != ''">
                <choose>
                    <when test="industry == '음식점'">
                        AND s.id IN (SELECT store_id FROM restaurant WHERE restaurant = #{subCategory})
                    </when>
                    <when test="industry == '카페'">
                        AND s.id IN (SELECT store_id FROM cafe WHERE cafe = #{subCategory})
                    </when>
                    <when test="industry == '술집'">
                        AND s.id IN (SELECT store_id FROM bar WHERE bar = #{subCategory})
                    </when>
                </choose>
            </if>
    
            <if test="themeArray != null and themeArray.size() > 0">
                AND t.theme IN
                <foreach item="theme" collection="themeArray" open="(" separator="," close=")">
                    #{theme}
                </foreach>
            </if>
        </where>
        <choose>
            <when test="order == 'likes'">
                ORDER BY likeCount DESC
            </when>
            <when test="order == 'views'">
                ORDER BY viewCount DESC
            </when>
            <when test="order == 'reviews'">
                ORDER BY reviewCount DESC
            </when>
        </choose>
    </select>
	
	
	<!-- store 테이블 삽입 -->
    <insert id="insertStore" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    INSERT INTO store (
        member_id,
        store_name,
        address,
        detail_address,
        tel,
        main_image1,
        main_image2,
        latitude,
        longitude,
        open_time,
        store_description,
        post_status,
        enroll_status,
        ceo_name
    ) VALUES (
        #{memberId},
        #{storeName},
        #{address},
        #{detailAddress},
        #{tel},
        #{mainImage1, jdbcType=VARCHAR},
        #{mainImage2, jdbcType=VARCHAR},
        #{latitude, jdbcType=VARCHAR},
        #{longitude, jdbcType=VARCHAR},
        #{openTime},
        #{storeDescription},
        'inactive',
		'wait',
        #{ceoName}
    )
</insert>


    <!-- 지역 정보 삽입 -->
    <insert id="insertRegion">
        INSERT INTO local (store_id, local)
        VALUES (#{storeId}, #{location})
    </insert>

    <!-- 업종 정보 삽입 -->
    <insert id="insertIndustry" parameterType="com.project.dto.IndustryDTO" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO industry (id, store_id, industry)
        VALUES (industry_seq.NEXTVAL, #{storeId}, #{industry})
    </insert>

    <!-- 음식점 정보 삽입 -->
    <insert id="insertRestaurant">
        INSERT INTO restaurant (industry_id, store_id, restaurant)
        VALUES (#{industryId}, #{storeId}, #{subcategory})
    </insert>

    <!-- 카페 정보 삽입 -->
    <insert id="insertCafe">
        INSERT INTO cafe (industry_id, store_id, cafe)
        VALUES (#{industryId}, #{storeId}, #{subcategory})
    </insert>

    <!-- 술집 정보 삽입 -->
    <insert id="insertBar">
        INSERT INTO bar (industry_id, store_id, bar)
        VALUES (#{industryId}, #{storeId}, #{subcategory})
    </insert>

    <!-- 테마 정보 삽입 -->
    <insert id="insertTheme">
        INSERT INTO theme (store_id, theme)
        VALUES (#{storeId}, #{theme})
    </insert>

	
	
</mapper>