<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.LoginMapper">
    <!-- 아이디 중복조회 -->
    <select id="isUserIdCheck" parameterType="string" resultType="int">
        select count(*) from member where member_id = #{memberId}
    </select>
    <!-- 닉네임 중복조회 -->
    <select id="isUserNicknameCheck" parameterType="string" resultType="int">
        select count(*) from member where nickname = #{nickname}
    </select>
     <!-- 사용자 회원 가입 -->
     <insert id="joinMember" parameterType="login">
         insert into member (category, registration_number, member_id, naver_id, google_id, kakao_id, passwd, nickname, introduction, email, status, created_at, inactive_date, reactive_date, deleted_date, profile_image, role)
         values (#{category}, #{registrationNumber, jdbcType=VARCHAR}, #{memberId}, #{naverId, jdbcType=VARCHAR}, #{googleId, jdbcType=VARCHAR}, #{kakaoId, jdbcType=VARCHAR}, #{passwd}, #{nickname}, #{introduction, jdbcType=VARCHAR},
         #{email}, 'active', SYSDATE, #{inactiveDate, jdbcType=DATE}, #{reactiveDate, jdbcType=DATE}, #{deletedDate, jdbcType=DATE}, #{profileImage, jdbcType=VARCHAR}, #{role})
    </insert>
    <!-- 사용자조회 -->
    <select id= "getUser" parameterType="string" resultType="login">
        select * from member where member_id = #{memberId}
    </select>
    <!-- 네이버, 카카오, 구글 SNS 유무 계정 조회 -->
    <select id="getNaverUser" parameterType="string" resultType="login">
        select * from member where naver_id = #{value}
    </select>
    <select id="getKakaoUser" parameterType="string" resultType="login">
        select * from member where kakao_id = #{value}
    </select>
    <select id="getGoogleUser" parameterType="string" resultType="login">
        select * from member where google_id = #{value}
    </select>
    <!--  네이버, 카카오, 구글 SNS 최초 회원가입 -->
    <insert id="insertNaverJoin" parameterType="login">
        insert into member (category, registration_number, member_id, naver_id, google_id, kakao_id, passwd, nickname, introduction, email, status, created_at, inactive_date, reactive_date, deleted_date, profile_image)
        values ('일반', #{registrationNumber, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{googleId, jdbcType=VARCHAR}, #{kakaoId, jdbcType=VARCHAR}, #{passwd, jdbcType=VARCHAR}, #{nickname,
        jdbcType=VARCHAR}, #{introduction, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, 'active', SYSDATE, #{inactiveDate, jdbcType=DATE}, #{reactiveDate, jdbcType=DATE}, #{deletedDate, jdbcType=DATE}, #{profileImage, jdbcType=VARCHAR} )
     </insert>
    <insert id="insertKakaoJoin" parameterType="login">
        insert into member (category, registration_number, member_id, naver_id, google_id, kakao_id, passwd, nickname, introduction, email, status, created_at, inactive_date, reactive_date, deleted_date, profile_image)
        values ('일반', #{registrationNumber, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{naverId, jdbcType=VARCHAR}, #{googleId, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{passwd, jdbcType=VARCHAR}, #{nickname,
        jdbcType=VARCHAR}, #{introduction, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, 'active', SYSDATE, #{inactiveDate, jdbcType=DATE}, #{reactiveDate, jdbcType=DATE}, #{deletedDate, jdbcType=DATE}, #{profileImage, jdbcType=VARCHAR})
     </insert>
     <insert id="insertGoogleJoin" parameterType="login">
        insert into member (category, registration_number, member_id, naver_id, google_id, kakao_id, passwd, nickname, introduction, email, status, created_at, inactive_date, reactive_date, deleted_date, profile_image)
        values ('일반', #{registrationNumber, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{naverId, jdbcType=VARCHAR}, #{memberId, jdbcType=VARCHAR}, #{kakaoId, jdbcType=VARCHAR}, #{passwd, jdbcType=VARCHAR}, #{nickname,
        jdbcType=VARCHAR}, #{introduction, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, 'active', SYSDATE, #{inactiveDate, jdbcType=DATE}, #{reactiveDate, jdbcType=DATE}, #{deletedDate, jdbcType=DATE}, #{profileImage, jdbcType=VARCHAR})
     </insert>
    <!-- 비밀번호 재설정 -->
    <update id="updatePassword" parameterType="login">
        update member set passwd = #{passwd} where member_id = #{memberId}
    </update>
    <!-- 아이디 찾기 -->
    <select id="getFindId" parameterType="string" resultType="login">
        select * from member where email = #{email }
    </select>
    
    <!-- 이메일 조회 -->
        <select id="checkEmailExists" resultType="int" parameterType="string">
        SELECT COUNT(*)
        FROM member
        WHERE email = #{userEmail}
    </select>
    
</mapper>